import { prompt } from "../types/promptType"
import dotenv from "dotenv"
import { storage, storageRef } from "../config/firebase"
import { uploadBytesResumable, getDownloadURL } from "firebase/storage"
import { query } from "./HuggingFace"
dotenv.config()

const huggingFaceApiKey = process.env.HUGGINFACE_API_KEY || ""
const modelApi = process.env.MODEL_API_URL || ""

class IaModelService {
  /**
   *
   * @param inputs the prompt to send to the model
   * @returns the url of the auidio file generated by the model and stored in firebase
   */
  public async queryIaModel(inputs: prompt): Promise<any> {
    if (!huggingFaceApiKey && !modelApi) {
      throw new Error("Hugging face api key or model api not found")
    }

    return await this.upload(inputs)
  }

  /**
   * Upload the audio file to firebase storage
   * @param inputs the prompt to send to the model
   * @returns the url of the auidio file generated by the model and stored in firebase
   */
  public async upload(inputs: prompt) {
    const audioBlob = await query(inputs, huggingFaceApiKey)
    const metadata = {
      contentType: "audio/wav",
    }

    const uploadTask = uploadBytesResumable(storageRef, audioBlob, metadata)

    uploadTask.on(
      "state_changed",
      (snapshot) => {
        // Observe state change events such as progress, pause, and resume
        // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded
        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100
        console.log("Upload is " + progress + "% done")
        switch (snapshot.state) {
          case "paused":
            console.log("Upload is paused")
            break
          case "running":
            console.log("Upload is running")
            break
        }
      },
      (error) => {
        switch (error.code) {
          case "storage/unauthorized":
            // User doesn't have permission to access the object
            console.log("User doesn't have permission to access the object")
            break
          case "storage/canceled":
            // User canceled the upload
            console.log("User canceled the upload")
            break
          case "storage/unknown":
            // Unknown error occurred, inspect error.serverResponse
            console.log("Unknown error occurred, inspect error.serverResponse")
            break
        }
      },
      () => {
        // Handle successful uploads on complete
        // For instance, get the download URL: https://firebasestorage.googleapis.com/...
      }
    )
    return getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
      return downloadURL
    })
  }
}

export default new IaModelService()
